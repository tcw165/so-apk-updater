apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: rootProject.file("gradleScripts/android_app_extension.gradle")
apply from: rootProject.file("gradleScripts/version_extension.gradle")

// If you are missing these files, please download from our internal file repo
// https://drive.google.com/open?id=1a-H4w7Qia5EPBJKh2fE7aJ-07LjBR2Vh
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Version
def versionPropertiesFile = project.file("version.properties")
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))

android {
    compileSdkVersion deps.build.compileSdkVersion
    buildToolsVersion deps.build.buildToolsVersion

    defaultConfig {
        applicationId "co.sodalabs.privilegedinstaller"

        minSdkVersion deps.build.minSdkVersion
        targetSdkVersion deps.build.targetSdkVersion

        versionCode buildVersionCode(versionProperties.artifact_version)
        versionName versionProperties.artifact_version

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // Command to extract the public key hash:
        // keytool -printcert -jarfile your.apk | sed -n 's,SHA256:\s*\([A-F0-9:]*\),\1,p' | sed 's,:,,g' | tr A-f a-f
        buildConfigField "String[]", "CLIENT_WHITELIST", "{" +
            "\"c8a2e9bccf597c2fb6dc66bee293fc13f2fc47ec77bc6b2b0d52c11f51192ab8\"" +
            "}"
    }

    signingConfigs {
        platform {
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storeFile rootProject.file(keystoreProperties['releaseKeyStore'])
            storePassword keystoreProperties['releaseStorePassword']
        }
    }

    buildTypes {
        all {
            // Keep IPackageInstallObserver and IPackageDeleteObserver
            minifyEnabled false
            useProguard false
            shrinkResources false
        }

        debug {
            debuggable true

            signingConfig signingConfigs.platform

            buildConfigField "String", "DATE_OF_BUILD", "\"00-00-00\""
            buildConfigField "String", "GIT_SHA", "\"-\""
        }

        release {
            debuggable true

            signingConfig signingConfigs.platform

            // Disables PNG crunching for the release build type.
            crunchPngs false
        }
    }

    flavorDimensions "APP"

    productFlavors {
        dev {
            dimension "APP"
        }

        prod {
            dimension "APP"
        }
    }

    dexOptions {
        // Don't preDex on CI
        preDexLibraries = !rootProject.ext.isCI
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        abortOnError false
        fatal 'StopShip'

        // this is never going to be a real "app"
        disable 'GoogleAppIndexingWarning'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
                includeAndroidResources = true
                returnDefaultValues = true
            }
        }
    }

    // This configuration is to fix the packing problem that we use androidx
    // namespace (ViewModel) and some of the other modules use older android
    // namespace.
    // e.g. android-23-no-hides.jar
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.2"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android
    implementation deps.androidx.appcompat
    implementation deps.androidx.annotations
    implementation deps.androidx.constraintLayout
    implementation deps.androidx.coreKtx
    // Multi-dex.
    implementation deps.androidx.multidex

    // Kotlin STD Library.
    implementation deps.kotlin.stdlibJdk7

    // RxAndroid
    implementation deps.rx.java
    implementation deps.rx.android
    implementation deps.rx.kotlin
    implementation deps.rx.relay
    implementation deps.rx.binding.lib
    implementation deps.rx.binding.appcompat

    // Log
    implementation deps.tracking.timber

    // Unit tests.
    testImplementation deps.test.junit
    testImplementation deps.test.mockito

    // Instrumentation tests.
    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.espresso.core
}

repositories {
    mavenCentral()
}