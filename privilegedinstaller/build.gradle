apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$rootDir/quality.gradle"
apply from: "$rootDir/android_app_extension.gradle"

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "co.sodalabs.privilegedinstaller"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode buildVersionCode(artifact_version)
        versionName artifact_version
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        all {
            // Keep IPackageInstallObserver and IPackageDeleteObserver
            minifyEnabled false
            useProguard false
            shrinkResources false
        }

        debug {
            debuggable true

            buildConfigField "String", "DATE_OF_BUILD", "\"00-00-00\""
            buildConfigField "String", "GIT_SHA", "\"-\""
        }

        release {
            debuggable true

            // Disables PNG crunching for the release build type.
            crunchPngs false
        }
    }

    dexOptions {
        // Don't preDex on CI
        preDexLibraries = !rootProject.build.ci
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        abortOnError false
        fatal 'StopShip'

        // this is never going to be a real "app"
        disable 'GoogleAppIndexingWarning'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
                includeAndroidResources = true
                returnDefaultValues = true
            }
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.2"
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support libs
    implementation "com.android.support:appcompat-v7:28.0.0"
    implementation "com.android.support:multidex:1.0.3"

    // Better logging
    implementation "com.jakewharton.timber:timber:4.7.1"

    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
repositories {
    mavenCentral()
}
