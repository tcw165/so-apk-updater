apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
// For full integration of bugs tracking. e.g. mapping upload
apply plugin: 'com.bugsnag.android.gradle'

apply from: rootProject.file("gradleScripts/android_app_extension.gradle")
apply from: rootProject.file("gradleScripts/version_extension.gradle")

// If you are missing these files, please download from our internal file repo
// store: https://drive.google.com/open?id=1IXPvYIFQz0cPlzw88HIJ8M_Ipf7IYSy1
// key:   https://drive.google.com/open?id=1Q6UysSx2CmMPfhFOSwe87nSXvwFZeq5u
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Version
def versionPropertiesFile = rootProject.file("version.properties") // The repo (global) properties
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))

// Bugsnag service
def getBugsnagAPIKeyFromFile = {
    // If you are missing this file, please download from our internal file repo
    // https://drive.google.com/drive/folders/1V8tpGNrdw0P_58fjmFp1oi3S6UhDy5Tv?usp=sharing
    def bugsnagPropertiesFile = project.file("bugsnag.properties")
    def bugsnagProperties = new Properties()
    bugsnagProperties.load(new FileInputStream(bugsnagPropertiesFile))
    bugsnagProperties.bugsnag_api_key
}
def bugsnagAPIKey = System.getenv("BUGSNAG_API_KEY_FOR_UPDATER") ?: getBugsnagAPIKeyFromFile()

android {
    compileSdkVersion deps.build.compileSdkVersion
    buildToolsVersion deps.build.buildToolsVersion

    defaultConfig {
        applicationId "co.sodalabs.apkupdater"

        minSdkVersion deps.build.minSdkVersion
        targetSdkVersion deps.build.targetSdkVersion

        versionCode buildVersionCode(versionProperties.artifact_version)
        versionName versionProperties.artifact_version

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        buildConfigField "String", "BUGSNAG_API_KEY", "\"$bugsnagAPIKey\""

        buildConfigField "String", "GIT_SHA", "\"${getGitHash()}\""
        buildConfigField "String[]", "BASE_URLS", "{\"Hey developer, make sure update this!\"}"
        buildConfigField "String[]", "PACKAGES_TO_CHECK", "{\"Hey developer, make sure update this!\"}"
        buildConfigField "String", "ADMIN_PASSCODE", "\"000000\"" // Must be 0..9

        buildConfigField "long", "HEARTBEAT_INTERVAL_SECONDS", "15"
        buildConfigField "long", "CHECK_INTERVAL_SECONDS", "600" // 24 min
        buildConfigField "int", "INSTALL_HOUR_BEGIN", "0" // 00:00
        buildConfigField "int", "INSTALL_HOUR_END", "23" // 23:00
        buildConfigField "boolean", "INSTALL_SILENTLY", "true"
        buildConfigField "boolean", "INSTALL_ALLOW_DOWNGRADE", "false"
        buildConfigField "boolean", "DOWNLOAD_USE_CACHE", "true"

        buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "READ_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "MAX_CONNECTIONS_PER_HOST", "10"
        buildConfigField "int", "MAX_TOTAL_CONNECTIONS", "10"

        // Log Persistence Configs /////////////////////////////////////////////
        // IMPORTANT: The least interval value can be 15 minutes for [PeriodicWorkRequest]
        // Anything lower will be replaced on runtime with 15 minutes by the [WorkManager]
        buildConfigField "long", "REPEAT_INTERVAL", "3L"            // 3 Hours
        buildConfigField "long", "MAX_FILE_DURATION", "7L"          // 7 Days
        buildConfigField "int", "MAX_LOG_FILE_SIZE", "10"           // 10 MBs
    }

    signingConfigs {
        platform {
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storeFile rootProject.file(keystoreProperties['releaseKeyStore'])
            storePassword keystoreProperties['releaseStorePassword']
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false

            buildConfigField "long", "HEARTBEAT_INTERVAL_SECONDS", "15"

            buildConfigField "long", "CHECK_INTERVAL_SECONDS", "120" // 2 min

            buildConfigField "int", "INSTALL_HOUR_BEGIN", "0" // 00:00
            buildConfigField "int", "INSTALL_HOUR_END", "23" // 23:00
            buildConfigField "boolean", "INSTALL_ALLOW_DOWNGRADE", "true"

            buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "30"
            buildConfigField "int", "READ_TIMEOUT_SECONDS", "30"
            buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "30"

            signingConfig signingConfigs.platform
        }

        preRelease {
            initWith release
            matchingFallbacks = ['release']

            // Note: Disabling debuggable allows the ZIP alignment to be applied,
            // which also allows this build to be baked in the Android image.
            debuggable false
            useProguard true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Disables PNG crunching for the release build type.
            crunchPngs false

            signingConfig signingConfigs.platform
        }

        release {
            // Note: Disabling debuggable allows the ZIP alignment to be applied,
            // which also allows this build to be baked in the Android image.
            debuggable false
            useProguard true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Disables PNG crunching for the release build type.
            crunchPngs false

            buildConfigField "long", "HEARTBEAT_INTERVAL_SECONDS", "120" // 2 min

            buildConfigField "long", "CHECK_INTERVAL_SECONDS", "1440" // 24 min

            buildConfigField "boolean", "DOWNLOAD_USE_CACHE", "true"

            buildConfigField "boolean", "INSTALL_ALLOW_DOWNGRADE", "false"

            buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "60"
            buildConfigField "int", "READ_TIMEOUT_SECONDS", "60"
            buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "60"

            signingConfig signingConfigs.platform
        }
    }

    flavorDimensions "PRODUCT"

    productFlavors {
        sparkpoint {
            dimension "PRODUCT"
            buildConfigField "String[]", "BASE_URLS", "{" +
                "\"https://staging.sparkpoint.services/api/v0/\"," +
                "\"https://sparkpoint.services/api/v0/\"," +
                "\"http://localhost:3000/api/v0/\"," +
                "\"http://staging.sparkpoint.services/api/v0/\"," +
                "\"http://sparkpoint.services/api/v0/\"" +
                "}"
            buildConfigField "String[]", "PACKAGES_TO_CHECK", "{" +
                "\"co.sodalabs.sparkpoint\"" +
                "}"
            buildConfigField "String[]", "UPDATE_CHANNELS", "{" +
                "\"Beta\"," +
                "\"Stable\"" +
                "}"
        }
    }

    dexOptions {
        // Don't preDex on CI
        preDexLibraries = !rootProject.ext.isCI
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        abortOnError true
        fatal 'StopShip'

        // this is never going to be a real "app"
        disable 'GoogleAppIndexingWarning'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
                includeAndroidResources = true
                returnDefaultValues = true
            }
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.2"
    }
}

kapt {
    useBuildCache = true
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":updaterengine")

    // Android
    implementation deps.androidx.appcompat
    implementation deps.androidx.annotations
    implementation deps.androidx.constraintLayout
    implementation deps.androidx.preference
    implementation deps.androidx.coreKtx
    // Multi-dex.
    implementation deps.androidx.multidex

    // Kotlin
    implementation deps.kotlin.stdlibJdk7

    // DI
    implementation deps.dagger.android
    implementation deps.dagger.androidSupport
    kapt deps.dagger.compiler
    kapt deps.dagger.androidCompiler

    // Rx
    implementation deps.rx.java
    implementation deps.rx.android
    implementation deps.rx.kotlin
    implementation deps.rx.relay
    implementation deps.rx.binding.lib
    implementation deps.rx.binding.appcompat
    implementation deps.rx.binding.design
    implementation deps.rx.binding.recyclerview
    implementation deps.rx.binding.viewpager

    // Network
    implementation deps.retrofit.lib
    implementation deps.retrofit.okhttp
    implementation deps.retrofit.adapterRx
    implementation deps.retrofit.converterGson
    implementation deps.retrofit.converterMoshi
    implementation deps.retrofit.converterScalars
    implementation deps.retrofit.interceptorLogging

    // Process
    implementation deps.process.phoenix

    // Json
    implementation deps.moshi.lib
    kapt deps.moshi.codegen

    // Tracking
    implementation deps.tracking.timber
    implementation 'com.bugsnag:bugsnag-android:4.17.2'

    // Leak Canary
    implementation deps.leakcanary.android

    // Better dimens
    // FIXME: Figure out the right resolution in design assets!
    // implementation deps.scaleDimen.sdp
    // implementation deps.scaleDimen.ssp

    // Unit tests.
    testImplementation deps.test.junit
    testImplementation deps.test.mockito

    // Instrumentation tests.
    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.espresso.core
}

bugsnag {
    // For the Bugsnag Gradle plugin to upload the mapping file to this key.
    apiKey bugsnagAPIKey
}