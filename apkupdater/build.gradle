apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "io.fabric"

apply from: rootProject.file("gradleScripts/android_app_extension.gradle")
apply from: rootProject.file("gradleScripts/version_extension.gradle")

// If you are missing these files, please download from our internal file repo
// store: https://drive.google.com/open?id=1IXPvYIFQz0cPlzw88HIJ8M_Ipf7IYSy1
// key:   https://drive.google.com/open?id=1Q6UysSx2CmMPfhFOSwe87nSXvwFZeq5u
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Version
def versionPropertiesFile = project.file("version.properties")
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))

android {
    compileSdkVersion deps.build.compileSdkVersion
    buildToolsVersion deps.build.buildToolsVersion

    defaultConfig {
        applicationId "co.sodalabs.apkupdater"

        minSdkVersion deps.build.minSdkVersion
        targetSdkVersion deps.build.targetSdkVersion

        versionCode buildVersionCode(versionProperties.artifact_version)
        versionName versionProperties.artifact_version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BASE_URL", "\"make sure update this, please!\""

        buildConfigField "int", "HEARTBEAT_INTERVAL_SECONDS", "15"
        buildConfigField "int", "UPDATE_CHECK_INTERVAL_SECONDS", "1440"

        buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "READ_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "45"
        buildConfigField "int", "MAX_CONNECTIONS_PER_HOST", "10"
        buildConfigField "int", "MAX_TOTAL_CONNECTIONS", "10"
    }

    signingConfigs {
        platform {
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storeFile rootProject.file(keystoreProperties['releaseKeyStore'])
            storePassword keystoreProperties['releaseStorePassword']
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false

            signingConfig signingConfigs.platform

            buildConfigField "int", "HEARTBEAT_INTERVAL_SECONDS", "15"
            buildConfigField "int", "UPDATE_CHECK_INTERVAL_SECONDS", "300" // 5 min

            buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "30"
            buildConfigField "int", "READ_TIMEOUT_SECONDS", "30"
            buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "30"
        }

        staging {
            initWith(release)
            matchingFallbacks = ['release']

            // Disables PNG crunching for the release build type.
            crunchPngs false
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.platform

            // Disables PNG crunching for the release build type.
            crunchPngs false

            buildConfigField "int", "HEARTBEAT_INTERVAL_SECONDS", "300" // 5 min
            buildConfigField "int", "UPDATE_CHECK_INTERVAL_SECONDS", "86400" // 1 day

            buildConfigField "int", "CONNECT_TIMEOUT_SECONDS", "60"
            buildConfigField "int", "READ_TIMEOUT_SECONDS", "60"
            buildConfigField "int", "WRITE_TIMEOUT_SECONDS", "60"
        }
    }

    flavorDimensions "PRODUCT"

    productFlavors {
        sparkpoint {
            dimension "PRODUCT"
            buildConfigField "String", "BASE_URL", "\"https://spark-api-v0-prod.azurewebsites.net/api/v0/\""
            buildConfigField "String[]", "PACKAGES_TO_CHECK", "{" +
                "\"co.sodalabs.sparkpoint\"" +
                "}"
        }
    }

    dexOptions {
        // Don't preDex on CI
        preDexLibraries = !rootProject.ext.isCI
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        abortOnError true
        fatal 'StopShip'

        // this is never going to be a real "app"
        disable 'GoogleAppIndexingWarning'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
                includeAndroidResources = true
                returnDefaultValues = true
            }
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.2"
    }
}

kapt {
    useBuildCache = true
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android
    implementation deps.androidx.appcompat
    implementation deps.androidx.annotations
    implementation deps.androidx.constraintLayout
    implementation deps.androidx.preference
    implementation deps.androidx.coreKtx
    // Multi-dex.
    implementation deps.androidx.multidex

    // Kotlin
    implementation deps.kotlin.stdlibJdk7

    // DI
    compileOnly deps.dagger.lib
    implementation deps.dagger.androidSupport
    kapt deps.dagger.compiler
    kapt deps.dagger.androidCompiler

    // Rx
    implementation deps.rx.java
    implementation deps.rx.android
    implementation deps.rx.kotlin
    implementation deps.rx.relay
    implementation deps.rx.binding.lib
    implementation deps.rx.binding.appcompat
    implementation deps.rx.binding.design
    implementation deps.rx.binding.recyclerview
    implementation deps.rx.binding.viewpager

    // Network
    implementation deps.retrofit.lib
    implementation deps.retrofit.okhttp
    implementation deps.retrofit.adapterRx
    implementation deps.retrofit.converterGson
    implementation deps.retrofit.converterMoshi
    implementation deps.retrofit.converterScalars
    implementation deps.retrofit.interceptorLogging

    // Process
    implementation deps.process.phoenix

    // Json
    implementation deps.moshi.lib
    kapt deps.moshi.codegen

    implementation project(":updaterengine")

    // Tracking
    implementation deps.tracking.timber
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
        transitive = true
    }

    // Better dimens
    implementation deps.scaleDimen.sdp
    implementation deps.scaleDimen.ssp

    // Unit tests.
    testImplementation deps.test.junit
    testImplementation deps.test.mockito

    // Instrumentation tests.
    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.espresso.core
}