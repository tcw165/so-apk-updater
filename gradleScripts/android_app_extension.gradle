apply from: rootProject.file("gradleScripts/version_extension.gradle")

// Artifact name
def artifactPropertiesFile = project.file("artifact.properties") // The module local properties
def artifactProperties = new Properties()
artifactProperties.load(new FileInputStream(artifactPropertiesFile))

android.applicationVariants.all { variant ->
    def isDebuggable = variant.getBuildType().isDebuggable()
    def appName = artifactProperties.artifact_name

    variant.outputs.all { output ->
        if (isDebuggable) {
            outputFileName = "${appName}-${output.baseName}-${variant.versionName}-${getGitHash()}.apk"
        } else {
            outputFileName = "${appName}-${output.baseName}-${variant.versionName}.apk"
        }
    }
}

// Don't rename the mapping file otherwise the bug tracking plugin won't work very likely.
// Instead, copy it so that CI can still add it to the Github artifacts
android.applicationVariants.all { variant ->
    variant.assembleProvider.configure {
        it.doLast {
            if (variant.mappingFile != null && variant.mappingFile.exists()) {
                def isDebuggable = variant.getBuildType().isDebuggable()
                def mappingFileName = "$archivesBaseName-$variant.baseName-mapping.txt"

                // Delete old renamed mapping file if it exists
                (new File(variant.mappingFile.parent, mappingFileName)).delete()

                def appName = artifactProperties.artifact_name

                // Copy the file to a new name without deleting the original file
                copy {
                    from variant.mappingFile
                    into variant.mappingFile.parent
                    rename {
                        if (isDebuggable) {
                            variant.mappingFile.parent + "/$appName-$variant.baseName-${variant.versionName}-${getGitHash()}-mapping.txt"
                        } else {
                            variant.mappingFile.parent + "/$appName-$variant.baseName-${variant.versionName}-mapping.txt"
                        }
                    }
                }
            }
        }
    }
}